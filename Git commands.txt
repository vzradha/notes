Git commands

Initialize
	git init

Add files
 git add -A

Commit changes
  git commit -m "Init repo"

Status
	git status

Restoring files 
	git checkout -f

Branching (Always recommended to use branching when changing code)
	git checkout master
	git checkout -b <branch name>

Merging
	change to master
		git checkout master
		git merge <branch name>
		
Clone a git repo
	make sure the master repo is fully updated
	on the target machine create top level dir eg: workspace, then cd to workspace, run
	git clone git@aztecpop:/opt/git/sample_app 
	


Git Remote
The repo should be initialized on the git server prior to adding the remote (SSH keys of the client should be added to authorized_keys on the git server)
To add the repo on the git server do:
	mkdir /opt/git/<repo_name>.git
	cd <repo_name>.git
	git init --bare

	Adding a git remote
		git remote add origin git@aztecpop:/opt/git/sample_app.git
	Push the changes to git server
		git push -u origin --all or git push origin <branch_name>



Git Patch

1. Clone if a new get repo
2. Create a branch git checkout -b <branch_name>
3. Change files and do commits (note: do not merge to master)
4. Do git log —pretty=oneline -3 to show the last commit
5. While still in branch do git format-patch master --stdout > <patch_name>.patch
Applying the patch

1. In master branch do git apply --stat <patch_name>.patch to see the stats of the file 
2. To check if the patch is not harmful do git apply —-check <patch_name>.patch
3. If no errors can apply the patch cleanly do git am —signoff <  <patch_name>.patch
